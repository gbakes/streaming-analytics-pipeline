services:
  postgres:
    image: debezium/postgres:15
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
<<<<<<< HEAD
    command:
=======
    command: 
>>>>>>> main
      - "postgres"
      - "-c"
      - "wal_level=logical"
    networks:
      - kafka-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:9092"
      - "${KAFKA_HOST_PORT}:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:${KAFKA_HOST_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-network

  connect:
    build:
      context: .
      dockerfile: Dockerfile.connect
    ports:
      - "${CONNECT_PORT}:8083"
    depends_on:
      - kafka
      - postgres
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:${KAFKA_PORT}"
      CONNECT_GROUP_ID: "1"
      CONNECT_CONFIG_STORAGE_TOPIC: ${CONNECT_CONFIG_TOPIC}
      CONNECT_OFFSET_STORAGE_TOPIC: ${CONNECT_OFFSET_TOPIC}
      CONNECT_STATUS_STORAGE_TOPIC: ${CONNECT_STATUS_TOPIC}
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG_LEVEL: "INFO"
    volumes:
      - connect-data:/usr/share/confluent-hub-components
    networks:
      - kafka-network

  minio:
    image: minio/minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_LOGGER_WEBHOOK_ENABLE_CUSTOMER: "on"
      MINIO_LOGGER_WEBHOOK_ENDPOINT_CUSTOMER: "http://host.docker.internal:7203/customer"
    command: server /data --console-address ":9001"
  akhq:
    image: tchiotludo/akhq:0.24.0
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
         connections:
           docker-kafka-server:
             properties:
               bootstrap.servers: "kafka:9092"
             schema-registry:
               url: "http://schema-registry:8081"
               type: "confluent"
             connect:
               - name: "kafka-connect"
                 url: "http://connect:8083"
    ports:
      - "${AKHQ_PORT:-8080}:8080"
    depends_on:
      - kafka
      - connect
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  connect-data:
